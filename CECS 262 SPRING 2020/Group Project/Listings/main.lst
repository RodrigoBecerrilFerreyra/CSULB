C51 COMPILER V9.60.0.0   MAIN                                                              05/07/2020 21:19:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil uVision 5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          #define Green 0
   4          #define Yellow 1
   5          #define Red 2
   6          
   7          // pedestrian crossing lights (outputs)
   8          sbit pedLightNS = P1^6;
   9          sbit pedLightEW = P1^7;
  10          
  11          // traffic lights (outputs)
  12          sbit redNS = P2^0;
  13          sbit yelNS = P2^1;
  14          sbit grnNS = P2^2;
  15          sbit redEW = P2^3;
  16          sbit yelEW = P2^4;
  17          sbit grnEW = P2^5;
  18          
  19          void delay(unsigned char);// void delay2(unsigned char);
  20          void lightHandler(void); //void lightHandler(unsigned char*);
  21          void outputHandler(void);
  22          
  23          // serial communication
  24          void UART_init();
  25          void transmit_data(char tx_data);
  26          void String(char *str);
  27          //unsigned char receive_1_byte(void);
  28          
  29          
  30          volatile unsigned char current_state_light_NS, current_state_light_EW;
  31          volatile unsigned int timer_high, timer_low; //for saving the value of the timer during an intterupt
  32          
  33          int main(void)
  34          {  
  35   1        
  36   1        
  37   1        UART_init();
  38   1        
  39   1        
  40   1        
  41   1        IE = 0x85;  //enable the interrupts
  42   1        
  43   1        P1 = 0x00; P2 = 0x0C; //initialize outputs
  44   1        
  45   1        while(1)
  46   1        {
  47   2          lightHandler();
  48   2          outputHandler();
  49   2        }
  50   1      }
  51          
  52          void outputHandler(void)
  53          {
  54   1        switch(current_state_light_NS)
C51 COMPILER V9.60.0.0   MAIN                                                              05/07/2020 21:19:04 PAGE 2   

  55   1        {
  56   2          case Red:
  57   2            redNS = 1; yelNS = 0; grnNS = 0;
  58   2            break;
  59   2          case Yellow:
  60   2            redNS = 0; yelNS = 1; grnNS = 0;
  61   2            break;
  62   2          case Green:
  63   2            redNS = 0; yelNS = 0; grnNS = 1;
  64   2            break;
  65   2        }
  66   1        
  67   1        switch(current_state_light_EW)
  68   1        {
  69   2          case Red: 
  70   2            redEW = 1; yelEW = 0; grnEW = 0;
  71   2            break;
  72   2          case Yellow: 
  73   2            redEW = 0; yelEW = 1; grnEW = 0; 
  74   2            break;
  75   2          case Green: 
  76   2            redEW = 0; yelEW = 0; grnEW = 1; 
  77   2            break;      
  78   2        }
  79   1      }
  80          
  81          void delay(unsigned char seconds)
  82          {
  83   1        unsigned char i, j;
  84   1        
  85   1        for(j = 0; j < seconds; j++)
  86   1        {
  87   2          for(i = 0; i < 20; i++) // 1 s
  88   2          {
  89   3            TMOD = 0x21; // mode 1
  90   3            TH0 = 0x3c; TL0 = 0xb0; // 0xffff - 50 000; 50 ms
  91   3            TR0 = 1; // turn timer on
  92   3            while(TF0 == 0); // do nothing until overflow
  93   3            TF0 = 0; // reset flag
  94   3          }
  95   2          TR0 = 0; // turn off timer
  96   2        }
  97   1      }
  98          /*
  99          void delay2(unsigned char seconds)
 100          {
 101            unsigned char i, j;
 102            
 103            for(j = 0; j < seconds; j++)
 104            {
 105              for(i = 0; i < 20; i++) // 1 s
 106              {
 107                TMOD = 0x11; // mode 1
 108                TH1 = 0x3c; TL1 = 0xb0; // 0xffff - 50 000; 50 ms
 109                TR1 = 1; // turn timer on
 110                while(TF1 == 0); // do nothing until overflow
 111                TF1 = 0; // reset flag
 112              }
 113              TR1 = 0; // turn off timer
 114            }
 115          }
 116          */
C51 COMPILER V9.60.0.0   MAIN                                                              05/07/2020 21:19:04 PAGE 3   

 117          void lightHandler(void)
 118          {
 119   1        if     (current_state_light_NS == Green && current_state_light_EW == Red)
 120   1        {
 121   2          delay(6);
 122   2          current_state_light_NS = Yellow;
 123   2        }
 124   1        else if(current_state_light_NS == Yellow && current_state_light_EW == Red)
 125   1        {
 126   2          delay(2);
 127   2          current_state_light_NS = Red; current_state_light_EW = Green;
 128   2        }
 129   1        else if(current_state_light_NS == Red && current_state_light_EW == Green)
 130   1        {
 131   2          delay(6);
 132   2          current_state_light_EW = Yellow;
 133   2        }
 134   1        else if(current_state_light_NS == Red && current_state_light_EW == Yellow)
 135   1        {
 136   2          delay(2);
 137   2          current_state_light_NS = Green; current_state_light_EW = Red;
 138   2        }
 139   1        // default
 140   1        else
 141   1        {
 142   2          current_state_light_NS = Green; current_state_light_EW = Red;
 143   2          redNS = 0; yelNS = 0; grnNS = 1;
 144   2          redEW = 1; yelEW = 0; grnEW = 0;
 145   2        }
 146   1      }
 147          
 148          void EWbutton() interrupt 0//ISR for button NS
 149          {
 150   1        //switch case statement that will turn on pedestrian light based on what state we are in
 151   1        if (current_state_light_NS == Green) // assume that ns is red while ew is green otherwise code sucks and
             - we need to change something
 152   1        {//
 153   2          //unsigned char i; unsigned char arr[1];
 154   2          TR0 = 0; //turn off timer 0 
 155   2          timer_high = TH0; timer_low = TL0; //save
 156   2          delay(1); // delay 1 second then go to yellow
 157   2          current_state_light_NS = Yellow; outputHandler();
 158   2          delay(2); //delay for 1 s and turn to red
 159   2          current_state_light_NS = Red; current_state_light_EW = Green; outputHandler(); // this is when this tr
             -affic light turns green
 160   2          
 161   2          pedLightEW = 1; //parallel direction
 162   2          
 163   2          // display on LCD
 164   2          String("Seconds left for EW : \n\n");
 165   2          
 166   2          String("6\n"); delay(1);
 167   2          String("5\n"); delay(1);
 168   2          String("4\n"); delay(1);
 169   2          String("3\n"); delay(1);
 170   2          String("2\n"); delay(1);
 171   2          String("1\n"); delay(1); //thank you, Yanderedev
 172   2          
 173   2          pedLightEW = 0;
 174   2          current_state_light_EW = Yellow; outputHandler();
 175   2          // Ped light blinking
 176   2          delay(1); pedLightEW = 1;
C51 COMPILER V9.60.0.0   MAIN                                                              05/07/2020 21:19:04 PAGE 4   

 177   2          delay(1); pedLightEW = 0;
 178   2          String("STOP\n\n");
 179   2          // current state: NS is Yellow, EW is Red
 180   2          lightHandler(); outputHandler();
 181   2          TH0 = timer_high; TL0 = timer_low; //load
 182   2          TR0 = 1; //turn on timer 0
 183   2        }
 184   1      }
 185          
 186          void NSbutton() interrupt 2//ISR for button EW
 187          {
 188   1        //switch case statement that will turn on pedestrian light based on what state we are in
 189   1        if (current_state_light_EW == Green) // assume that ns is red while ew is green otherwise code sucks and
             - we need to change something
 190   1        {//
 191   2          TR0 = 0; //turn off timer 0 
 192   2          timer_high = TH0; timer_low = TL0; //save
 193   2          delay(1); // delay 1 second then go to yellow
 194   2          current_state_light_EW = Yellow; outputHandler();
 195   2          delay(2); //delay for 1 s and turn to red
 196   2          current_state_light_EW = Red; current_state_light_NS = Green; outputHandler(); // this is when this tr
             -affic light turns green
 197   2          
 198   2          pedLightNS = 1; //parallel direction
 199   2          
 200   2          // display on LCD
 201   2          String("Seconds left for EW : \n\n");
 202   2          
 203   2          String("6\n"); delay(1);
 204   2          String("5\n"); delay(1);
 205   2          String("4\n"); delay(1);
 206   2          String("3\n"); delay(1);
 207   2          String("2\n"); delay(1);
 208   2          String("1\n"); delay(1); //thank you, Yanderedev
 209   2          
 210   2          pedLightNS = 0;
 211   2          current_state_light_NS = Yellow; outputHandler();
 212   2          // Ped light blinking
 213   2          delay(1); pedLightNS = 1;
 214   2          delay(1); pedLightNS = 0;
 215   2          String("STOP\n\n");
 216   2          // current state: NS is Yellow, EW is Red
 217   2          lightHandler(); outputHandler();
 218   2          TH0 = timer_high; TL0 = timer_low; //load
 219   2          TR0 = 1; //turn on timer 0
 220   2        }
 221   1      }
 222          
 223          
 224          
 225          
 226           void UART_init() //function to initialize the UART
 227          {
 228   1        TMOD = 0x21; //timer 1, 8 bit auto reload mode
 229   1        TH1 = 0xFD; //load value for 9600 baud rate
 230   1        SCON = 0x50; //Mode 1, reception enable
 231   1        TR1 = 1; //starting timer 1
 232   1      
 233   1      }
 234          
 235          void transmit_data(char tx_data)
 236          {
C51 COMPILER V9.60.0.0   MAIN                                                              05/07/2020 21:19:04 PAGE 5   

 237   1        SBUF = tx_data; //load char into SBUF register
 238   1        while (TI == 0); //waiting until stop bit transmit
 239   1        TI = 0;         //clearing TI flag
 240   1        
 241   1      
 242   1      }
 243          
 244          void String(char *str)
 245            
 246          {
 247   1        int i;
 248   1        for (i = 0; str[i]!= 0; i++) //send each char of string till the NULL
 249   1        {
 250   2          transmit_data(str[i]); //Call transmit data function
 251   2        }
 252   1      
 253   1      }
 254          
 255          
 256          /*unsigned char receive_1_byte(void)
 257            
 258          {
 259            unsigned char received_byte;
 260            while (RI==0); // wait to receive one byte from serial port
 261            received_byte = SBUF;
 262            RI = 0; 
 263            return received_byte;
 264            
 265          
 266          }
 267          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    750    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
